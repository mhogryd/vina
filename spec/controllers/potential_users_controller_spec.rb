require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PotentialUsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # PotentialUser. As you add validations to PotentialUser, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {:email => "mike@gmail.com", :first_name => "mike", :gender => "male"}
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {:email => "", :first_name => "", :gender => ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PotentialUsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all potential_users as @potential_users" do
      potential_user = PotentialUser.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:potential_users)).to eq([potential_user])
    end
  end

  describe "GET #show" do
    it "assigns the requested potential_user as @potential_user" do
      potential_user = PotentialUser.create! valid_attributes
      get :show, {:id => potential_user.to_param}, valid_session
      expect(assigns(:potential_user)).to eq(potential_user)
    end
  end

  # describe "GET #new" do
  #   it "assigns a new potential_user as @potential_user" do
  #     get :new, {}, valid_session
  #     expect(assigns(:potential_user)).to be_a_new(PotentialUser)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested potential_user as @potential_user" do
  #     potential_user = PotentialUser.create! valid_attributes
  #     get :edit, {:id => potential_user.to_param}, valid_session
  #     expect(assigns(:potential_user)).to eq(potential_user)
  #   end
  # end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new PotentialUser" do
        expect {
          post :create, {:potential_user => valid_attributes}, valid_session
        }.to change(PotentialUser, :count).by(1)
      end

      it "assigns a newly created potential_user as @potential_user" do
        post :create, {:potential_user => valid_attributes}, valid_session
        expect(assigns(:potential_user)).to be_a(PotentialUser)
        expect(assigns(:potential_user)).to be_persisted
      end

      # it "redirects to the created potential_user" do
      #   post :create, {:potential_user => valid_attributes}, valid_session
      #   expect(response).to redirect_to(PotentialUser.last)
      # end
    end

    # context "with invalid params" do
    #   it "assigns a newly created but unsaved potential_user as @potential_user" do
    #     post :create, {:potential_user => invalid_attributes}, valid_session
    #     expect(assigns(:potential_user)).to be_a_new(PotentialUser)
    #   end
    #
    #   it "re-renders the 'new' template" do
    #     post :create, {:potential_user => invalid_attributes}, valid_session
    #     expect(response).to render_template("new")
    #   end
    # end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        # skip("Add a hash of attributes valid for your model")
        {:email => "mhogryd@alum.mit.edu", :first_name => "michael", :gender => "male"}
      }

      it "updates the requested potential_user" do
        potential_user = PotentialUser.create! valid_attributes
        put :update, {:id => potential_user.to_param, :potential_user => new_attributes}, valid_session
        potential_user.reload
        # skip("Add assertions for updated state")
        expect(assigns(:potential_user).attributes['email']).to match(new_attributes[:email])
        expect(assigns(:potential_user).attributes['first_name']).to match(new_attributes[:first_name])
        expect(assigns(:potential_user).attributes['gender']).to match(new_attributes[:gender])
      end

      it "assigns the requested potential_user as @potential_user" do
        potential_user = PotentialUser.create! valid_attributes
        put :update, {:id => potential_user.to_param, :potential_user => valid_attributes}, valid_session
        expect(assigns(:potential_user)).to eq(potential_user)
      end

      # it "redirects to the potential_user" do
      #   potential_user = PotentialUser.create! valid_attributes
      #   put :update, {:id => potential_user.to_param, :potential_user => valid_attributes}, valid_session
      #   expect(response).to redirect_to(potential_user)
      # end
    end

    # context "with invalid params" do
    #   it "assigns the potential_user as @potential_user" do
    #     potential_user = PotentialUser.create! valid_attributes
    #     put :update, {:id => potential_user.to_param, :potential_user => invalid_attributes}, valid_session
    #     expect(assigns(:potential_user)).to eq(potential_user)
    #   end
    #
    #   it "re-renders the 'edit' template" do
    #     potential_user = PotentialUser.create! valid_attributes
    #     put :update, {:id => potential_user.to_param, :potential_user => invalid_attributes}, valid_session
    #     expect(response).to render_template("edit")
    #   end
    # end
  end

  describe "DELETE #destroy" do
    it "destroys the requested potential_user" do
      potential_user = PotentialUser.create! valid_attributes
      expect {
        delete :destroy, {:id => potential_user.to_param}, valid_session
      }.to change(PotentialUser, :count).by(-1)
    end

    # it "redirects to the potential_users list" do
    #   potential_user = PotentialUser.create! valid_attributes
    #   delete :destroy, {:id => potential_user.to_param}, valid_session
    #   expect(response).to redirect_to(potential_users_url)
    # end
  end

end
